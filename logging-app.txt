ln

Logging App

store logs in utc format, 
put format settings(by day and list of log id's with their format setting, 
patch only the day (better than patch each id?) in context so when user logs in response from api puts in context, 
add select month range, and add multiple, or add date range and close or add as list, or add select day, 
put to repo, 
moment npm
error boundary
Link/log/view with project select/picked

fetch:
-login/sign up
//loading/error
// api validate and get projects only. get format and logs on view page click
// set context with account
-log button
//component did mount: fetch, logging project still? 
startStopLog = () => {
//if start, fetcherror/logging, fetch, setstate start // if never stop
//if stop, fetcherror/logging, fetch, setstate stop, add log to MainLog state for main log list 
-new project 
//fetch(put)
// add to state/context
-format log
//formatting/error
//context get project
//get selected logs from state
//fetch(put)
// apply format to selected logs, or get from api and setState in main log or loglist with updated logs
//save format as last format in state
--

--------------------------------------------------------------------------------

An application for logging start and stop times. Customize exports and notifications, organize related logs into records, leave notes, and view past logs.

 Features:
	-Basic features:
		- Main Page:
			- Log start and stop times.
			- View start and stop times.
			- Adjust and format times.
			- Side menu folder system by projects and year/month/week
			- The clock starts and stop with requests to the server
				- Will keep running after close if come back next day.
				- What to do if wifi is out? - Internal store?
			- Log start and stop times for multiple projects.
		-View Page:
			- Side bar: 
				- View projects in a list and each project's years/months/days 
				- Projects/years/months/days have expand buttons
				- Years expand into a grid of months
				- Months expand into a calendar structure of days
				- Highlighting or clicking a project/year/month/day selects it to be viewed,
				  adjusted, or formated in a combined view of the logs. 
			- Main content:
				- Display the sources of the logs in the header: 
					- Display a combined view of the logs from the sources selected in the side bar
					- Rename the project. Name also changes in side bar while renaming.
				- Adjust and Format times :
					- Can be done by highlighting (selecting) or clicking any part of the page when viewing logs on the main page or the page for a particular folder/year/month/day
						- Selects the bookmark on the line
						- Format options appear on mouse up after highlight
							- Highlighted lines will be indicated as selected-> large bracket
						-Highlight mutiple sections with alt, shift to select start/end lines
						-Highlight again to unselect
					- Raw times should be saved separate from formatting choice
					- Adjust to the nearest 1, 2, 3, 5, 10, 15, 30 minute mark
					- Format to the day, hour, minute, second, or millisecond
					- (Account permission feature?) -> Change start and stop times
					- Combine projects
						- Logs occuring at the same time will be combined as one.
				- Export:
					- Format times
					- Settings
						- File type / Data type
						- Column or row
					- Appears at curly brace on desktop. Placed above logs on mobile.
	-Settings:
		-Account:
			- Keep records
			- Delete records
			- Share accounts, live edit
			- Multiplayer, multiple start/stop buttons, one for each account
		-Notifications:
			- Adjust settings
			- Reminders
				- * Auto search for common log start and stop times to display in options.
					- Or ask if log is running too long past usual stop?
				- Set reminders
* If time


keep both javascript version and sql. 
	sql: return from server map of days with/without logs, 
	return from server queried with selectors,  
	WHERE date_viewed > (now() - '30 days'::INTERVAL)

list time complexity/how it operates

https://www.w3schools.com/js/js_performance.asp

https://tableplus.com/blog/2018/07/postgresql-how-to-extract-date-from-timestamp.html

multiple entities

third party apis

going to database costs time, bigger query or sometimes three fast queries

https://stackoverflow.com/questions/749199/when-would-i-want-to-use-a-heap

get log analytics

https://www.geeksforgeeks.org/applications-of-depth-first-search/
https://www.geeksforgeeks.org/applications-of-breadth-first-traversal/

https://www.geeksforgeeks.org/software-design-patterns/

reduce export types to 1 - 4

get people who log same time, people who log different times, 
people who log similar times, weighted graph
people who log similar times as user

if you've ever logged between between certain hours given a buffer 
of n-min max break time in between logs

shortest number of continuous logs between two times where there is an 
n-min break-time buffer

longest day with shortest number of breaks

weighted graph

notify recommends for starting and ending

groups, users

get the weather and apply it to the tree growth, simple

shareable link